[
  
  {
    "title": "Chirpy 테마에서 글 작성하기",
    "url": "/posts/chirpy-%EC%9E%91%EC%84%B1%EB%B2%95/",
    "categories": "Github, Chirpy",
    "tags": "jekyll, chirpy, markdown, blog",
    "date": "2024-06-03 10:14:01 +0900",
    





    
    "snippet": "  Chirpy 테마는 빠르고 직관적인 Jekyll 기반 블로그 테마로, 깔끔한 디자인과 다양한 기능을 제공합니다.이 블로그 포스트에서는 Chirpy 테마를 사용하여 블로그 글을 작성하는 방법에 대해 알아보겠습니다.  먼저 _posts 풀더에 파일을 하나 생성한 후 형식은 YYYY-MM-DD-파일명.md로 맞춰 생성합니다. 포스트 파일의 확장자는 반드...",
    "content": "  Chirpy 테마는 빠르고 직관적인 Jekyll 기반 블로그 테마로, 깔끔한 디자인과 다양한 기능을 제공합니다.이 블로그 포스트에서는 Chirpy 테마를 사용하여 블로그 글을 작성하는 방법에 대해 알아보겠습니다.  먼저 _posts 풀더에 파일을 하나 생성한 후 형식은 YYYY-MM-DD-파일명.md로 맞춰 생성합니다. 포스트 파일의 확장자는 반드시 md이어야 하며 파일명은 한글을 사용해도 무관합니다.1. Chirpy 테마 머릿말 작성  파일을 생성한 후 내용을 작성하기 전에 다음과 같은 형식으로 포스트의 정보를 머릿말로 작성해야 한다.--- title: \"TITLE\"description: \"chirpy 글 작성 요령\"date : YYYY-MM-DD HH:MM:SS +/-TTTTcategories: [TOP_CATEGORIE, SUB_CATEGORIE]tags: [TAG] autor: nicknametoc: truetoc_sticky: true---머릿말은 ---로 쓰는 영역을 구분해 주어야 한다.1-1. title포스트의 제목을 적어주는 곳이다. title을 적어주지 않으면 .md 파일의 파일명이 title로 업로드 된다.1-2. description 포스트 설명기본적으로 목록에서 보여지는 포스트 설명은 자동 생성이 됩니다. 이를 수정하기 위해 description을 머릿말에 추가하면 됩니다.---description: Short summary of the post.---1-3. Timezone of date더 정확한 시간을 제공하기 위한 필드이다. +/-TTTT 는 대한민국일 경우 +09:00 으로 작성하면 됩니다.date 를 적어주지 않으면 .md 형식에서 YYYY-MM-DD 형식이 표기됩니다.---date : YYYY-MM-DD HH:MM:SS +/-TTTT---1-4. Categories &amp; Tags각 포스트의 categories 는 최대 2개의 요소를 포함하도록 설계되어 있다. tags는 0에서 무한대까지 가능합니다.---categories: [TOP_CATEGORIE, SUB_CATEGORIE]tags: [tag1, tag2, tag3]---1-5. Author 작성자 정보게시물의 작성자 정보는 일반적으로 머릿말에 입력할 필요가 없습니다. 기본적으로 구성 파일의 변수 _config.yml에서 social 정보에서 가져옵니다.작성자에 링크를 주기 위해서는 _data/authors.yml에서 작성자 정보를 추가하시면 됩니다.그런 다음 author 단일 항목을 지정하거나 authors 여러 항목을 지정하는 데 사용합니다.---author: &lt;author_id&gt;                     # for single entry# orauthors: [&lt;author1_id&gt;, &lt;author2_id&gt;]   # for multiple entries---2. markdown 작성법2-1. 헤더  큰제목: 문서 제목      This is an H1        This is an H1  ————-    작은제목: 문서 부제목      This is an H2        This is an H2  ————-    글머리: 1~6까지만 지원    # This is a H1## This is a H2### This is a H3#### This is a H4##### This is a H5###### This is a H6        This is a H1    This is a H2    This is a H3    This is a H4    This is a H5    This is a H6    ####### This is a H7(지원하지 않음)—–  2-2. 줄바꿈  사용법 : &lt;br&gt; 입력 or 문장 끝에 공백 2개 이상 입력한다.2-3. 블록 인용구(BlockQuote)  사용법 : &gt; 블럭인용문자를 이용한다.    &gt; 이것은 첫 번째 인용구입니다.&gt;\t&gt; 이것은 두 번째 인용구입니다.&gt;\t&gt;\t&gt; 이것은 세 번째 인용구입니다.              이것은 첫 번째 인용구입니다.              이것은 두 번째 인용구입니다.                  이것은 세 번째 인용구입니다.                    이 안에서는 다른 마크다운 요소를 포함할 수 있다.&gt; * List&gt;\t```&gt;\tcode&gt;\t```      List        code              2-4. 목록: 순서있는 목록(번호)  사용법 : 숫자와 점을 사용한다.1. 첫번째2. 두번째3. 세번째  첫번째  두번째  세번째  오류 아닌 오류지만 순서에 어떤 번호를 입력해도 내림차순으로 정의된다.1. 첫번째3. 세번째2. 두번째  첫번째  세번째  두번째2-5. 목록: 순서없는 목록( * , ` + ,  - ` )* 순서1  * 순서2    * 순서3+ 순서1  + 순서2    + 순서3- 순서1  - 순서2    - 순서3  순서1          순서2                  순서3                      순서1          순서2                  순서3                      순서1          순서2                  순서3                      꼭 같은 것을 사용할 필요 없이 혼합해서 사용할 수 있다.2-6. 인라인  형식 : ‘`사이에 내용 입력. ` 자체를 인라인 시키고 싶으면 두 개를 입력하여 사용하면 escape 됨  ex) '' ' '' -&gt; `, '인라인' -&gt; 인라인  ` 키는 윈도우 키보드 tap위에 있는 키입니다.2-7. 코드 블럭  형식 : ''' 코드 &#39;&#39;&#39;  말 그대로 코드를 넣을 수 있는 블럭입니다.```‘'’javaclass a {    String a = “example”;}‘’’``` java class a {    String a = \"example\";}2-8. 수평선  작성하면 해당 라인에 수평선을 만든다.* * *********------------------------------------------  본인은 ------ 처럼 길게 쓰는 것을 선호한다. 짧으면 헷갈리는 경우가 조금 있다.2-9. 링크  참조 링크Link: [Google](https://www.google.com)Link: &lt;a href=\"https://www.google.com/\"&gt;Google&lt;/a&gt;  Link: GoogleLink: Google  새창으로 이동Link: [Google](https://www.google.com){:target=\"_blank\"}Link: &lt;a href=\"https://www.google.com/\" target=\"_blank\"&gt;Google&lt;/a&gt;  Link: Google위 방법은 일부 Markdown 랜더러에서만 작동한다. 만약 안 된다면 마음 편하게 아래 방법을 이용하면 된다!  Link: Google2-10. 강조*강조하는 방법*_강조하는 방법_**두 배로 강조하는 방법**__두 배로 강조하는 방법__~~취소선 사용하는 방법~~  강조하는 방법  강조하는 방법  두 배로 강조하는 방법  두 배로 강조하는 방법  취소선 사용하는 방법2-11. 이미지  Markdown 사용하기          가장 일반적인 방법으로 이미지를 저장소에 업로드한 후 해당 이미지의 URL을 사용하여 이미지를 삽입할 수 있습니다.      ![이미지 설명](이미지 URL)![유튜브 아이콘](https://github.com/Euihyunee/euihyunee.github.io/blob/main/_posts/images/youtube-icon.png?raw=true)  HTML 사용하기          좀 더 세밀한 조정이 필요한 경우 HTML 태그를 사용할 수 있습니다.      &lt;img src=\"이미지URL\" alt=\"Example Image\" width=\"500\" height=\"300\"&gt;  외부 URL 사용하기          물론 외부 이미지 URL을 사용할 수도 있습니다. 이는 이미지를 GitHub 저장소에 업로드하지 않고도 사용할 수 있는 방법입니다.      &lt;img src=\"https://example.com/path/to/image.png\" alt=\"Example Image\" width=\"500\" height=\"300\"&gt;&lt;img src=\"https://example.com/path/to/image.png\" alt=\"Example Image\" width=\"500\" height=\"300\"&gt;2.12 프롬프트tip 프롬프트에는, info, warning 및 등 여러 유형이 있습니다. 블록 인용에 클래스를 추가하여 생성할 수 있습니다.&gt; Example line for prompt.{: .prompt-info }  Example line for prompt.&gt; Example line for prompt.{: .prompt-warning }  Example line for prompt.더 알아보기Jekyll 게시물에 대한 자세한 내용을 보려면 Jekyll Docs: Posts를 방문해보세요."
  },
  
  {
    "title": "Chirpy 테마 커스터마이징",
    "url": "/posts/chirpy-config%EC%88%98%EC%A0%95/",
    "categories": "Github, Chirpy",
    "tags": "jekyll, chirpy, blog",
    "date": "2023-11-22 14:21:00 +0900",
    





    
    "snippet": "  이전 글을 통해 깃허브 블로그를 만들었습니다. 본 글에서는 블로그 커스터마이징을 다루겠습니다._config.yml 파일 수정_config.yml 파일은 깃허브 페이지나 다른 정적 사이트 생성기를 사용하여 만든 블로그나 웹사이트의 설정 파일입니다. 이 파일은 해당 사이트의 설정과 구성 요소들을 정의하여 사이트의 title, language, avat...",
    "content": "  이전 글을 통해 깃허브 블로그를 만들었습니다. 본 글에서는 블로그 커스터마이징을 다루겠습니다._config.yml 파일 수정_config.yml 파일은 깃허브 페이지나 다른 정적 사이트 생성기를 사용하여 만든 블로그나 웹사이트의 설정 파일입니다. 이 파일은 해당 사이트의 설정과 구성 요소들을 정의하여 사이트의 title, language, avatar 등을 바꿀 수 있습니다.항목            항목      값      설명                  lang      ko-KO 또는 en      언어를 설정하는 곳입니다. 기본값은 en이며 한글로 변경하고 싶으시다면 ko-KR로 수정하시면 됩니다.              timezone      Asia/Seoul      서울 표준시로 설정합니다.              title             프로필 아래 타이틀입니다.              tagline             타이틀 아래 부연설명입니다.              description             SEO를 위한 키워드들을 입력합니다.              url      https://euihyunee.github.io      블로그 url을 입력해줍니다.              github      githubID      본인의 깃허브 아이디를 입력합니다.              twitter.username      twwiter id      트위터 아이디를 입력합니다. 생략 가능              social.name      이름      블로그 글에 표시될 나의 이름을 입력합니다.              social.email      이메일      이메일 계정을 입력합니다.              social.links      소셜 링크들      사용하는 소셜 서비스의 홈 url을 입력합니다.              theme_mode      light or dark      원하는 테마 스킨을 사용합니다.              avatar      이미지 경로      블로그 프로필의 이미지를 설정합니다.              toc      true      글에서 목차를 나타냅니다.              paginate      10      한 목록에 몇 개의 글을 표시해줄 것인지 설정합니다.      lang 바꾸기기본값이 en입니다. 이를 변경하게 된다면 layout, tabs, search, panel, copyright, meta, not_found, notification, post, data time format, categories page가 변경됩니다. 어떻게 변경되는지는 _data/locales에 있습니다. 영어 버전이 좋다면 en을 그대로 유지하시고, 한국어 버전으로 바꾸고 싶으시다면 ko-KR로 변경해주시면 됩니다. 만약 한국어 버전에서 특정 부분만 영어로 바꾸시고 싶으시다면 _data/locales/ko-KR.yml파일에서 특정 부분만 en.yml 파일과 동일하게 변경해주시면 됩니다.avatar 바꾸기avatar 항목에 이미지 경로를 입력해줍니다. 저는 /assets/img/profile/profile.png로 설정했습니다.  만약 이미지 업로드가 안 되신다면 깃허브 리포지토리에 있는 이미지 주소를 넣어주시면 됩니다.##폰트 색상/폰트 변경왼쪽 사이드바 백그라운드 이미지 넣기사이드바 아래 아이콘 및 링크 넣기Footer 설정About 만들기favicon 변경하기#"
  },
  
  {
    "title": "Chirpy 테마를 이용한 블로그 만들기",
    "url": "/posts/chirpy-git%EB%B8%94%EB%A1%9C%EA%B7%B8%EC%84%A4%EC%B9%98/",
    "categories": "Github, Chirpy",
    "tags": "jekyll, chirpy, blog",
    "date": "2023-11-15 10:49:33 +0900",
    





    
    "snippet": "  Jekyll Chirpy테마를 이용하여 깃 블로그 만들기에 대하여 알아보겠습니다. 제가 직접 하며 느꼈던 에러 또한 정리했습니다.Jekyll Chirpy Theme 가져오기  Chirpy github page에서 zip파일을 다운하거나  Chirpy github page에서 fork하는 방법이 있습니다.필자는 첫 번째 방법을 이용했습니다.사전 준비...",
    "content": "  Jekyll Chirpy테마를 이용하여 깃 블로그 만들기에 대하여 알아보겠습니다. 제가 직접 하며 느꼈던 에러 또한 정리했습니다.Jekyll Chirpy Theme 가져오기  Chirpy github page에서 zip파일을 다운하거나  Chirpy github page에서 fork하는 방법이 있습니다.필자는 첫 번째 방법을 이용했습니다.사전 준비물  Ruby 사이트에서 버전 3이상을 다운받아 줍니다.윈도우 환경에서는 Start Command Prompt with Ruby 프롬프트 창을 이용해주세요.    brew install rbenvruby -v        Node.js를 설치해줍니다.    brew install nodenode -v       1. zip파일 다운로드한 경우  Github 자신의 repository를 생성합니다.          Repository 이름은 &lt;자신의 github 계정명&gt;.github.io로 생성합니다.      public으로 설정합니다.      Add a Readme file은 체크 해제하여 branch를 생성하지 않도록 합니다.         local에서 원하는 경로에 zip파일을 압축 해제합니다.  터미널로 해당 폴더에 접속합니다.  .gitignore 파일에 제외할 파일을 추가해줍니다.    echo \"Gemfile.lock\" &gt;&gt; .gitignore        해당 폴더를 git 저장소와 원격 연결합니다.    git initgit remote add origin https://&lt;token&gt;@github.com/&lt;git계정명&gt;/&lt;Repository이름&gt;.git              token을 이용하는 이유는 더 이상 github에서 https로 연결을 지원하지 않기 때문입니다. token을 생성하는 방법은 여기를 참조해주세요.        main branch를 생성하고 폴더의 내용을 commit/push 합니다.    git branch -M maingit add .git commit -m \"commit first\"git push -u origin main      2. fork한 경우chirpy 테마 fork우선 Chirpy github page에서 fork부터 진행합니다.fork할 때 Repository이름은 &lt;자신의 github 계정명&gt;.github.io로 생성합니다.branch 변경github 페이지에서 branch를 master에서 main으로 변경합니다.clone 받기로컬에서 원하는 폴더에 clone해줍니다.git clone https://&lt;token&gt;@github.com/&lt;git계정명&gt;/&lt;Repository이름&gt;.git  token을 이용하는 이유는 더 이상 github에서 https로 연결을 지원하지 않기 때문입니다. token을 생성하는 방법은 여기를 참조해주세요.chirpy 초기화하기터미널 내 clone한 폴더에서 아래 명령어를 사용하여 chirpy 초기화를 진행합니다.tools/init[INFO] Initialization successful! &lt;-- 성공 메세지입니다. 위의 명령어 수행 시 다음 파일들이 삭제됩니다.  .travis.yml  _posts 폴더 하위의 폴더들  docs 폴더3. GitHub Action 설정      위의 내용을 마쳤다면 github 페이지로 들어가 자신의 Repostory - Settings - Pages - Build and Deployment에서GitHub Actions로 변경합니다.    configure 클릭  commit 클릭  이후 도메인에 ‘https://.github.io'를 입력하여 페이지가 배포된지 확인합니다.  ![Desktop View](https://github.com/Euihyunee/euihyunee.github.io/blob/main/assets/img/git/git-init-page.png?raw=true)  Github repository의 Action 탭에서 실행이 끝나야 들어가집니다. 노란불이면 실행 중, 초록불이면 완료, 빨간불이면 에러입니다.Workflow permissions 변경Setting - Actions - general에서 workflow permissions를 Read and write permissions로 변경하고 save를 눌러줍니다.위의 과정을 마치고 배포가 성공적으로 되었다면 로컬에서 pull을 통해 바뀐 내용을 가져옵니다.$ git pull4. 로컬 실행 환경 세팅  Jekyll 실행을 위해 필요한 모듈 설치    $ bundle        webrick 설치    # Ruby 3.0 이상부터 webrick을 설치해줘야 에러가 안 납니다.gem install webrick        Node.js 모듈 설치    $ npm install &amp;&amp; npm run build              node.js 모듈을 설치하지 않으면 assets/js/dist/*min.js Not Found 에러 발생과 함께 블로그 기능이 정상적으로 동작하지 않습니다.        윈도우에서는      ‘&amp;&amp;’ 토큰은 이 버전에서 올바른 문 구분 기호가 아닙니다.    + CategoryInfo          : ParserError: (:) [], ParentContainsErrorRecordException    + FullyQualifiedErrorId : InvalidEndOfLine    이런 에러가 나온다면 그냥 한 줄씩 입력하면 됩니다.  로컬에서 Jekyll을 실행합니다.    $ jekyll serve         웹 브라우저에서 htps://127.0.0.1:4000 또는 https://localhost:4000에서 동작이 잘 되는지 확인합니다."
  }
  
]

