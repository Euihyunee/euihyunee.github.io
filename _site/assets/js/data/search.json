[
  
  {
    "title": "Chirpy 테마에서 글 작성하기",
    "url": "/posts/chirpy-%EC%9E%91%EC%84%B1%EB%B2%95/",
    "categories": "Github, Chirpy",
    "tags": "jekyll, chirpy, markdown, blog",
    "date": "2024-06-03 10:14:01 +0900",
    





    
    "snippet": "이름 지정 및 경로_posts 폴더에 파일을 하나 생성한 후 형식은 YYYY-MM-DD-파일명.md 로 맞춰줍니다. 포스트 파일의 확장자는 md이어야 한다. 파일명은 한글을 사용해도 무관합니다.Chirpy 테마 머릿말 작성내용을 작성하기 전에 다음과 같은 형식으로 포스트의 정보를 머릿말로 작성해야 한다.--- title: \"TITLE\"descripti...",
    "content": "이름 지정 및 경로_posts 폴더에 파일을 하나 생성한 후 형식은 YYYY-MM-DD-파일명.md 로 맞춰줍니다. 포스트 파일의 확장자는 md이어야 한다. 파일명은 한글을 사용해도 무관합니다.Chirpy 테마 머릿말 작성내용을 작성하기 전에 다음과 같은 형식으로 포스트의 정보를 머릿말로 작성해야 한다.--- title: \"TITLE\"description: \"chirpy 글 작성 요령\"date : YYYY-MM-DD HH:MM:SS +/-TTTTcategories: [TOP_CATEGORIE, SUB_CATEGORIE]tags: [TAG] autor: nicknametoc: truetoc_sticky: true---머릿말은 ---로 쓰는 영역을 구분해 주어야 한다.title포스트의 제목을 적어주는 곳이다. title을 적어주지 않으면 .md 파일의 파일명이 title로 업로드 된다.description 포스트 설명기본적으로 목록에서 보여지는 포스트 설명은 자동 생성이 됩니다. 이를 수정하기 위해 description을 머릿말에 추가하면 됩니다.---description: Short summary of the post.---Timezone of date더 정확한 시간을 제공하기 위한 필드이다. +/-TTTT 는 대한민국일 경우 +09:00 으로 작성하면 됩니다.date 를 적어주지 않으면 .md 형식에서 YYYY-MM-DD 형식이 표기됩니다.---date : YYYY-MM-DD HH:MM:SS +/-TTTT---Categories &amp; Tags각 포스트의 categories 는 최대 2개의 요소를 포함하도록 설계되어 있다. tags는 0에서 무한대까지 가능합니다.---categories: [TOP_CATEGORIE, SUB_CATEGORIE]tags: [tag1, tag2, tag3]---Author 작성자 정보게시물의 작성자 정보는 일반적으로 머릿말에 입력할 필요가 없습니다. 기본적으로 구성 파일의 변수 _config.yml에서 social 정보에서 가져옵니다.작성자에 링크를 주기 위해서는 _data/authors.yml에서 작성자 정보를 추가하시면 됩니다.그런 다음 author 단일 항목을 지정하거나 authors 여러 항목을 지정하는 데 사용합니다.---author: &lt;author_id&gt;                     # for single entry# orauthors: [&lt;author1_id&gt;, &lt;author2_id&gt;]   # for multiple entries---markdown 작성법줄바꿈  형식 : &lt;br&gt; 입력 or 문장 끝에 공백 2개 이상 입력한다.블록 인용구  형식 : &gt; 를 앞에 붙인다. 이중 인용구를 사용할 때는 &gt;&gt; 를 입력한다."
  },
  
  {
    "title": "Chirpy 테마 커스터마이징",
    "url": "/posts/chirpy-config%EC%88%98%EC%A0%95/",
    "categories": "Github, Chirpy",
    "tags": "jekyll, chirpy, blog",
    "date": "2023-11-22 14:21:00 +0900",
    





    
    "snippet": "  이전 글을 통해 깃허브 블로그를 만들었습니다. 본 글에서는 블로그 커스터마이징을 다루겠습니다._config.yml 파일 수정_config.yml 파일은 깃허브 페이지나 다른 정적 사이트 생성기를 사용하여 만든 블로그나 웹사이트의 설정 파일입니다. 이 파일은 해당 사이트의 설정과 구성 요소들을 정의하여 사이트의 title, language, avat...",
    "content": "  이전 글을 통해 깃허브 블로그를 만들었습니다. 본 글에서는 블로그 커스터마이징을 다루겠습니다._config.yml 파일 수정_config.yml 파일은 깃허브 페이지나 다른 정적 사이트 생성기를 사용하여 만든 블로그나 웹사이트의 설정 파일입니다. 이 파일은 해당 사이트의 설정과 구성 요소들을 정의하여 사이트의 title, language, avatar 등을 바꿀 수 있습니다.항목            항목      값      설명                  lang      ko-KO 또는 en      언어를 설정하는 곳입니다. 기본값은 en이며 한글로 변경하고 싶으시다면 ko-KR로 수정하시면 됩니다.              timezone      Asia/Seoul      서울 표준시로 설정합니다.              title             프로필 아래 타이틀입니다.              tagline             타이틀 아래 부연설명입니다.              description             SEO를 위한 키워드들을 입력합니다.              url      https://euihyunee.github.io      블로그 url을 입력해줍니다.              github      githubID      본인의 깃허브 아이디를 입력합니다.              twitter.username      twwiter id      트위터 아이디를 입력합니다. 생략 가능              social.name      이름      블로그 글에 표시될 나의 이름을 입력합니다.              social.email      이메일      이메일 계정을 입력합니다.              social.links      소셜 링크들      사용하는 소셜 서비스의 홈 url을 입력합니다.              theme_mode      light or dark      원하는 테마 스킨을 사용합니다.              avatar      이미지 경로      블로그 프로필의 이미지를 설정합니다.              toc      true      글에서 목차를 나타냅니다.              paginate      10      한 목록에 몇 개의 글을 표시해줄 것인지 설정합니다.      lang 바꾸기기본값이 en입니다. 이를 변경하게 된다면 layout, tabs, search, panel, copyright, meta, not_found, notification, post, data time format, categories page가 변경됩니다. 어떻게 변경되는지는 _data/locales에 있습니다. 영어 버전이 좋다면 en을 그대로 유지하시고, 한국어 버전으로 바꾸고 싶으시다면 ko-KR로 변경해주시면 됩니다. 만약 한국어 버전에서 특정 부분만 영어로 바꾸시고 싶으시다면 _data/locales/ko-KR.yml파일에서 특정 부분만 en.yml 파일과 동일하게 변경해주시면 됩니다.avatar 바꾸기avatar 항목에 이미지 경로를 입력해줍니다. 저는 /assets/img/profile/profile.png로 설정했습니다.  만약 이미지 업로드가 안 되신다면 깃허브 리포지토리에 있는 이미지 주소를 넣어주시면 됩니다.##폰트 색상/폰트 변경왼쪽 사이드바 백그라운드 이미지 넣기사이드바 아래 아이콘 및 링크 넣기Footer 설정About 만들기favicon 변경하기#"
  },
  
  {
    "title": "Chirpy 테마를 이용한 블로그 만들기",
    "url": "/posts/chirpy-git%EB%B8%94%EB%A1%9C%EA%B7%B8%EC%84%A4%EC%B9%98/",
    "categories": "github, chirpy",
    "tags": "jekyll, chirpy, blog",
    "date": "2023-11-15 10:49:33 +0900",
    





    
    "snippet": "  Jekyll Chirpy테마를 이용하여 깃 블로그 만들기에 대하여 알아보겠습니다. 제가 직접 하며 느꼈던 에러 또한 정리했습니다.Jekyll Chirpy Theme 가져오기  Chirpy github page에서 zip파일을 다운하거나  Chirpy github page에서 fork하는 방법이 있습니다.필자는 첫 번째 방법을 이용했습니다.사전 준비...",
    "content": "  Jekyll Chirpy테마를 이용하여 깃 블로그 만들기에 대하여 알아보겠습니다. 제가 직접 하며 느꼈던 에러 또한 정리했습니다.Jekyll Chirpy Theme 가져오기  Chirpy github page에서 zip파일을 다운하거나  Chirpy github page에서 fork하는 방법이 있습니다.필자는 첫 번째 방법을 이용했습니다.사전 준비물  Ruby 사이트에서 버전 3이상을 다운받아 줍니다.윈도우 환경에서는 Start Command Prompt with Ruby 프롬프트 창을 이용해주세요.    brew install rbenvruby -v        Node.js를 설치해줍니다.    brew install nodenode -v       1. zip파일 다운로드한 경우  Github 자신의 repository를 생성합니다.          Repository 이름은 &lt;자신의 github 계정명&gt;.github.io로 생성합니다.      public으로 설정합니다.      Add a Readme file은 체크 해제하여 branch를 생성하지 않도록 합니다.         local에서 원하는 경로에 zip파일을 압축 해제합니다.  터미널로 해당 폴더에 접속합니다.  .gitignore 파일에 제외할 파일을 추가해줍니다.    echo \"Gemfile.lock\" &gt;&gt; .gitignore        해당 폴더를 git 저장소와 원격 연결합니다.    git initgit remote add origin https://&lt;token&gt;@github.com/&lt;git계정명&gt;/&lt;Repository이름&gt;.git              token을 이용하는 이유는 더 이상 github에서 https로 연결을 지원하지 않기 때문입니다. token을 생성하는 방법은 여기를 참조해주세요.        main branch를 생성하고 폴더의 내용을 commit/push 합니다.    git branch -M maingit add .git commit -m \"commit first\"git push -u origin main      2. fork한 경우chirpy 테마 fork우선 Chirpy github page에서 fork부터 진행합니다.fork할 때 Repository이름은 &lt;자신의 github 계정명&gt;.github.io로 생성합니다.branch 변경github 페이지에서 branch를 master에서 main으로 변경합니다.clone 받기로컬에서 원하는 폴더에 clone해줍니다.git clone https://&lt;token&gt;@github.com/&lt;git계정명&gt;/&lt;Repository이름&gt;.git  token을 이용하는 이유는 더 이상 github에서 https로 연결을 지원하지 않기 때문입니다. token을 생성하는 방법은 여기를 참조해주세요.chirpy 초기화하기터미널 내 clone한 폴더에서 아래 명령어를 사용하여 chirpy 초기화를 진행합니다.tools/init[INFO] Initialization successful! &lt;-- 성공 메세지입니다. 위의 명령어 수행 시 다음 파일들이 삭제됩니다.  .travis.yml  _posts 폴더 하위의 폴더들  docs 폴더3. GitHub Action 설정      위의 내용을 마쳤다면 github 페이지로 들어가 자신의 Repostory - Settings - Pages - Build and Deployment에서GitHub Actions로 변경합니다.    configure 클릭  commit 클릭  이후 도메인에 ‘https://.github.io'를 입력하여 페이지가 배포된지 확인합니다.  ![Desktop View](https://github.com/Euihyunee/euihyunee.github.io/blob/main/assets/img/git/git-init-page.png?raw=true)  Github repository의 Action 탭에서 실행이 끝나야 들어가집니다. 노란불이면 실행 중, 초록불이면 완료, 빨간불이면 에러입니다.Workflow permissions 변경Setting - Actions - general에서 workflow permissions를 Read and write permissions로 변경하고 save를 눌러줍니다.위의 과정을 마치고 배포가 성공적으로 되었다면 로컬에서 pull을 통해 바뀐 내용을 가져옵니다.$ git pull4. 로컬 실행 환경 세팅  Jekyll 실행을 위해 필요한 모듈 설치    $ bundle        webrick 설치    # Ruby 3.0 이상부터 webrick을 설치해줘야 에러가 안 납니다.gem install webrick        Node.js 모듈 설치    $ npm install &amp;&amp; npm run build              node.js 모듈을 설치하지 않으면 assets/js/dist/*min.js Not Found 에러 발생과 함께 블로그 기능이 정상적으로 동작하지 않습니다.        윈도우에서는      ‘&amp;&amp;’ 토큰은 이 버전에서 올바른 문 구분 기호가 아닙니다.    + CategoryInfo          : ParserError: (:) [], ParentContainsErrorRecordException    + FullyQualifiedErrorId : InvalidEndOfLine    이런 에러가 나온다면 그냥 한 줄씩 입력하면 됩니다.  로컬에서 Jekyll을 실행합니다.    $ jekyll serve         웹 브라우저에서 htps://127.0.0.1:4000 또는 https://localhost:4000에서 동작이 잘 되는지 확인합니다."
  },
  
  {
    "title": "chirpy 설치 시 발생하는 오류 해결하기",
    "url": "/posts/chirpy-%EC%84%A4%EC%B9%98-%EC%8B%9C-%EB%B0%9C%EC%83%9D%ED%95%98%EB%8A%94-%EC%98%A4%EB%A5%98-%ED%95%B4%EA%B2%B0/",
    "categories": "블로그 운영",
    "tags": "jekyll, chirpy, blog, 블로그, 깃허브블로그, 코딩, 개발자",
    "date": "2023-06-21 14:49:35 +0900",
    





    
    "snippet": "chirpy 설치 후 초기 설정 진행 방법jekyll 테마를 모아놓은 사이트에서 chirpy 테마가 마음에 들어서 설치했습니다.그런데 로컬 저장소와 연동하기 위해 push하면 이런저런 오류가 발생해서 상당히 곤란했습니다.사흘 정도를 오류 해결에만 몰두했는데, 해결법은 “매뉴얼대로 설치하기”였습니다.아래의 chirpy 공식 매뉴얼을 따라 설치하면 대부분...",
    "content": "chirpy 설치 후 초기 설정 진행 방법jekyll 테마를 모아놓은 사이트에서 chirpy 테마가 마음에 들어서 설치했습니다.그런데 로컬 저장소와 연동하기 위해 push하면 이런저런 오류가 발생해서 상당히 곤란했습니다.사흘 정도를 오류 해결에만 몰두했는데, 해결법은 “매뉴얼대로 설치하기”였습니다.아래의 chirpy 공식 매뉴얼을 따라 설치하면 대부분 문제가 해결되었습니다.https://chirpy.cotes.page/posts/getting-started/그런데 이 매뉴얼에는 큰 걸림돌이 있습니다. bash tools/init명령어의 수행입니다. 리눅스 환경에서만 동작하는 명령이라 원도우에서는 사용할 길이 없습니다.이 명령을 실행하면 코드 및 템플릿 배포를 위해 존재하는 불필요한 파일을 삭제하고, 필요한 파일을 추가하고, 정리해줍니다.그렇다면 윈도우에서는 어떻게 해야 초기 설정을 진행할 수 있을까요?수동 초기화첫 번째는 자동으로 진행되는 과정을 수동으로 진행하는 방법입니다.아래 블로그에 자세히 소개되어 있습니다.https://velog.io/@hashnsalt/Github-Blog-만들기-2이 방법을 사용해 여러 번 시도해봤는데, 저는 도무지 에러가 해결되지 않아서 다른 방법을 찾아보게 되었고, 매뉴얼에서 init 명령을 사용해 초기화를 진행한다는 것을 알게 되어 wsl을 사용하기로 했습니다.WSL2를 이용해 init 파일을 실행하는 방법두 번째는 윈도우 자체에 리눅스를 사용할 수 있게 해주는 WSL2를 설치하는 방법입니다.저는 아래 글을 참고해 설치했습니다.LZ: 프로그래머 하우투 가이드 - WSL2 설치 및 사용법우분투 터미널을 사용하는 것보단 파워셀 상에서 실행하는 게 더 편한 것 같습니다.처음에 블로그 파일이 있는 폴더에서 bash tools/init 명령을 실행하자  commit unstaged files first, and then run this tool again.라는 문구가 나왔습니다. 커밋을 먼저 하고 실행하라네요.커밋까지만 진행하고 실행했더니 이번에는  syntax error near unexpected token `$’{\\r’’라고 합니다. 리눅스와 윈도우가 개행문자를 다루는 방식이 달라 발생하는 문제입니다. 다음 코드를 입력하여 해결할 수 있습니다.sed -i 's/\\r//' init이후 bash tools/init 명령을 실행해 초기화를 진행하면.github 폴더에 workflow 폴더만 남고, _posts 폴더에 있던 샘플 포스트가 사라집니다.초기화 이후 발생하는 문제gh_pages 브랜치가 생성되지 않음매뉴얼에서는 이제Gemfile.lock 파일 관련 에러위 과정까지 마친 후 config.yml 파일을 올바르게 수정했다면 정상적으로 동작되어야 하는데, push하면 git에서 처리하는 과정 중에 문제가 발생합니다.  bundle failed whit exit code 16, jekyll-theme-chirpy build errorGemfile.lock 파일이 이 문제의 원인입니다.아래 명령을 실행하면 해결할 수 있습니다.bundle lock --add-platform x86_64-linuxpage.min.js, home.min.js 등이 존재하지 않는 오류init 명령을 수행하면 /assets/js/dist 폴더에 몇 가지 js 파일이 생성되어야 하는데, 생성되지 않아 발생하는 문제입니다.여기에 있는 js파일들은 Table of Contents를 보여주는 기능 등을 수행하는데, 파일이 없다면 원격저장소에서 오류가 발생함은 물론 로컬 실행 환경에서도 ToC가 보이지 않습니다.아래 명령을 수행하면 해결할 수 있습니다.저는 dist 폴더를 생성한 상태에서 명령을 수행했는데, 그렇지 않아도 잘 동작할지는 모르겠네요.NODE_ENV=production npx rollup -c --bundleConfigAsCjs정리github 블로그를 운영하려면 정말 맨땅에 헤딩하듯 모든 디자인을 처음부터 직접 해나가야 하는 줄 알았는데, 이미 완성도 높은 템플릿을 사용할 수 있다는 점이 정말 매력적입니다.chirpy는 정말 많은 분이 사용하고 계시고, 저 역시 마음에 들어 적용해보고 싶은 테마였는데 이런저런 오류를 해결하기가 정말 손에 꼽을 수 있을 만큼 힘들었습니다.너무 힘들어서 포기하고 다른 테마를 적용해볼까 했지만 오류가 발생하는 건 마찬가지였고, chirpy만한 디자인이 없다고 생각해 계속 시도하다 드디어 성공하게 되었네요.덕분에 git을 많이 다뤄볼 수 있는 기회가 되었고, WSL도 설치하게 되었습니다.역시 직접 블로그를 운영하면서 배울 수 있는 내용이 많은 것 같습니다.여러분들의 오류 해결에도 도움이 되었으면 좋겠습니다.참조개행문자 문제 해결https://main.tistory.com/38js 파일 문제 해결https://github.com/cotes2020/jekyll-theme-chirpy/issues/1090리눅스에 chirpy 설치하는 과정https://www.irgroup.org/posts/jekyll-chirpy"
  },
  
  {
    "title": "test",
    "url": "/posts/first/",
    "categories": "블로그 운영",
    "tags": "test",
    "date": "2023-06-21 13:31:00 +0900",
    





    
    "snippet": "head2테스트 페이지입니다.head3  list",
    "content": "head2테스트 페이지입니다.head3  list"
  },
  
  {
    "title": "Customize the Favicon",
    "url": "/posts/customize-the-favicon/",
    "categories": "Blogging, Tutorial",
    "tags": "favicon",
    "date": "2019-08-11 01:34:00 +0900",
    





    
    "snippet": "The favicons of Chirpy are placed in the directory assets/img/favicons/. You may want to replace them with your own. The following sections will guide you to create and replace the default favicons...",
    "content": "The favicons of Chirpy are placed in the directory assets/img/favicons/. You may want to replace them with your own. The following sections will guide you to create and replace the default favicons.Generate the faviconPrepare a square image (PNG, JPG, or SVG) with a size of 512x512 or more, and then go to the online tool Real Favicon Generator and click the button Select your Favicon image to upload your image file.In the next step, the webpage will show all usage scenarios. You can keep the default options, scroll to the bottom of the page, and click the button Generate your Favicons and HTML code to generate the favicon.Download &amp; ReplaceDownload the generated package, unzip and delete the following two from the extracted files:  browserconfig.xml  site.webmanifestAnd then copy the remaining image files (.PNG and .ICO) to cover the original files in the directory assets/img/favicons/ of your Jekyll site. If your Jekyll site doesn’t have this directory yet, just create one.The following table will help you understand the changes to the favicon files:            File(s)      From Online Tool      From Chirpy                  *.PNG      ✓      ✗              *.ICO      ✓      ✗        ✓ means keep, ✗ means delete.The next time you build the site, the favicon will be replaced with a customized edition."
  },
  
  {
    "title": "Getting Started",
    "url": "/posts/getting-started/",
    "categories": "Blogging, Tutorial",
    "tags": "getting started",
    "date": "2019-08-09 21:55:00 +0900",
    





    
    "snippet": "PrerequisitesFollow the instructions in the Jekyll Docs to complete the installation of the basic environment. Git also needs to be installed.InstallationCreating a New SiteThere are two ways to cr...",
    "content": "PrerequisitesFollow the instructions in the Jekyll Docs to complete the installation of the basic environment. Git also needs to be installed.InstallationCreating a New SiteThere are two ways to create a new repository for this theme:  Using the Chirpy Starter - Easy to upgrade, isolates irrelevant project files so you can focus on writing.  GitHub Fork - Convenient for custom development, but difficult to upgrade. Unless you are familiar with Jekyll and are determined to tweak or contribute to this project, this approach is not recommended.Option 1. Using the Chirpy StarterSign in to GitHub and browse to Chirpy Starter, click the button Use this template &gt; Create a new repository, and name the new repository USERNAME.github.io, where USERNAME represents your GitHub username.Option 2. GitHub ForkSign in to GitHub to fork Chirpy, and then rename it to USERNAME.github.io (USERNAME means your username).Next, clone your site to local machine. In order to build JavaScript files later, we need to install Node.js, and then run the tool:$ bash tools/init  If you don’t want to deploy your site on GitHub Pages, append option --no-gh at the end of the above command.The above command will:  Check out the code to the latest tag (to ensure the stability of your site: as the code for the default branch is under development).  Remove non-essential sample files and take care of GitHub-related files.  Build JavaScript files and export to assets/js/dist/, then make them tracked by Git.  Automatically create a new commit to save the changes above.Installing DependenciesBefore running local server for the first time, go to the root directory of your site and run:$ bundleUsageConfigurationUpdate the variables of _config.yml as needed. Some of them are typical options:  url  avatar  timezone  langSocial Contact OptionsSocial contact options are displayed at the bottom of the sidebar. You can turn on/off the specified contacts in file _data/contact.yml.Customizing StylesheetIf you need to customize the stylesheet, copy the theme’s assets/css/jekyll-theme-chirpy.scss to the same path on your Jekyll site, and then add the custom style at the end of it.Starting with version 6.2.0, if you want to overwrite the SASS variables defined in _sass/addon/variables.scss, copy the main sass file _sass/main.scss into the _sass directory in your site’s source, then create a new file _sass/variables-hook.scss and assign new value.Customing Static AssetsStatic assets configuration was introduced in version 5.1.0. The CDN of the static assets is defined by file _data/origin/cors.yml, and you can replace some of them according to the network conditions in the region where your website is published.Also, if you’d like to self-host the static assets, please refer to the chirpy-static-assets.Running Local ServerYou may want to preview the site contents before publishing, so just run it by:$ bundle exec jekyll sAfter a few seconds, the local service will be published at http://127.0.0.1:4000.DeploymentBefore the deployment begins, check out the file _config.yml and make sure the url is configured correctly. Furthermore, if you prefer the project site and don’t use a custom domain, or you want to visit your website with a base URL on a web server other than GitHub Pages, remember to change the baseurl to your project name that starts with a slash, e.g, /project-name.Now you can choose ONE of the following methods to deploy your Jekyll site.Deploy by Using GitHub ActionsThere are a few things to get ready for.  If you’re on the GitHub Free plan, keep your site repository public.      If you have committed Gemfile.lock to the repository, and your local machine is not running Linux, go the the root of your site and update the platform list of the lock-file:    $ bundle lock --add-platform x86_64-linux      Next, configure the Pages service.      Browse to your repository on GitHub. Select the tab Settings, then click Pages in the left navigation bar. Then, in the Source section (under Build and deployment), select GitHub Actions from the dropdown menu.        Push any commits to GitHub to trigger the Actions workflow. In the Actions tab of your repository, you should see the workflow Build and Deploy running. Once the build is complete and successful, the site will be deployed automatically.  At this point, you can go to the URL indicated by GitHub to access your site.Manually Build and DeployOn self-hosted servers, you cannot enjoy the convenience of GitHub Actions. Therefore, you should build the site on your local machine and then upload the site files to the server.Go to the root of the source project, and build your site as follows:$ JEKYLL_ENV=production bundle exec jekyll bUnless you specified the output path, the generated site files will be placed in folder _site of the project’s root directory. Now you should upload those files to the target server."
  },
  
  {
    "title": "Writing a New Post",
    "url": "/posts/write-a-new-post/",
    "categories": "Blogging, Tutorial",
    "tags": "writing",
    "date": "2019-08-08 15:10:00 +0900",
    





    
    "snippet": "This tutorial will guide you how to write a post in the Chirpy template, and it’s worth reading even if you’ve used Jekyll before, as many features require specific variables to be set.Naming and P...",
    "content": "This tutorial will guide you how to write a post in the Chirpy template, and it’s worth reading even if you’ve used Jekyll before, as many features require specific variables to be set.Naming and PathCreate a new file named YYYY-MM-DD-TITLE.EXTENSION and put it in the _posts of the root directory. Please note that the EXTENSION must be one of md and markdown. If you want to save time of creating files, please consider using the plugin Jekyll-Compose to accomplish this.Front MatterBasically, you need to fill the Front Matter as below at the top of the post:---title: TITLEdate: YYYY-MM-DD HH:MM:SS +/-TTTTcategories: [TOP_CATEGORIE, SUB_CATEGORIE]tags: [TAG]     # TAG names should always be lowercase---  The posts’ layout has been set to post by default, so there is no need to add the variable layout in the Front Matter block.Timezone of DateIn order to accurately record the release date of a post, you should not only set up the timezone of _config.yml but also provide the post’s timezone in variable date of its Front Matter block. Format: +/-TTTT, e.g. +0800.Categories and TagsThe categories of each post are designed to contain up to two elements, and the number of elements in tags can be zero to infinity. For instance:---categories: [Animal, Insect]tags: [bee]---Author InformationThe author information of the post usually does not need to be filled in the Front Matter , they will be obtained from variables social.name and the first entry of social.links of the configuration file by default. But you can also override it as follows:Adding author information in _data/authors.yml (If your website doesn’t have this file, don’t hesitate to create one).&lt;author_id&gt;:  name: &lt;full name&gt;  twitter: &lt;twitter_of_author&gt;  url: &lt;homepage_of_author&gt;And then use author to specify a single entry or authors to specify multiple entries:---author: &lt;author_id&gt;                     # for single entry# orauthors: [&lt;author1_id&gt;, &lt;author2_id&gt;]   # for multiple entries---Having said that, the key author can also identify multiple entries.  The benefit of reading the author information from the file _data/authors.yml is that the page will have the meta tag twitter:creator, which enriches the Twitter Cards and is good for SEO.Table of ContentsBy default, the Table of Contents (TOC) is displayed on the right panel of the post. If you want to turn it off globally, go to _config.yml and set the value of variable toc to false. If you want to turn off TOC for a specific post, add the following to the post’s Front Matter:---toc: false---CommentsThe global switch of comments is defined by variable comments.active in the file _config.yml. After selecting a comment system for this variable, comments will be turned on for all posts.If you want to close the comment for a specific post, add the following to the Front Matter of the post:---comments: false---MathematicsFor website performance reasons, the mathematical feature won’t be loaded by default. But it can be enabled by:---math: true---After enabling the mathematical feature, you can add math equations with the following syntax:  Block math should be added with $$ math $$ with mandatory blank lines before and after $$  Inline math (in lines) should be added with $$ math $$ without any blank line before or after $$  Inline math (in lists) should be added with \\$$ math $$&lt;!-- Block math, keep all blank lines --&gt;$$LaTeX_math_expression$$&lt;!-- Inline math in lines, NO blank lines --&gt;\"Lorem ipsum dolor sit amet, $$ LaTeX_math_expression $$ consectetur adipiscing elit.\"&lt;!-- Inline math in lists, escape the first `$` --&gt;1. \\$$ LaTeX_math_expression $$2. \\$$ LaTeX_math_expression $$3. \\$$ LaTeX_math_expression $$MermaidMermaid is a great diagram generation tool. To enable it on your post, add the following to the YAML block:---mermaid: true---Then you can use it like other markdown languages: surround the graph code with ```mermaid and ```.ImagesCaptionAdd italics to the next line of an image, then it will become the caption and appear at the bottom of the image:![img-description](/path/to/image)_Image Caption_SizeIn order to prevent the page content layout from shifting when the image is loaded, we should set the width and height for each image.![Desktop View](/assets/img/sample/mockup.png){: width=\"700\" height=\"400\" }  For an SVG, you have to at least specify its width, otherwise it won’t be rendered.Starting from Chirpy v5.0.0, height and width support abbreviations (height → h, width → w). The following example has the same effect as the above:![Desktop View](/assets/img/sample/mockup.png){: w=\"700\" h=\"400\" }PositionBy default, the image is centered, but you can specify the position by using one of the classes normal, left, and right.  Once the position is specified, the image caption should not be added.      Normal position    Image will be left aligned in below sample:    ![Desktop View](/assets/img/sample/mockup.png){: .normal }            Float to the left    ![Desktop View](/assets/img/sample/mockup.png){: .left }            Float to the right    ![Desktop View](/assets/img/sample/mockup.png){: .right }      Dark/Light modeYou can make images follow theme preferences in dark/light mode. This requires you to prepare two images, one for dark mode and one for light mode, and then assign them a specific class (dark or light):![Light mode only](/path/to/light-mode.png){: .light }![Dark mode only](/path/to/dark-mode.png){: .dark }ShadowThe screenshots of the program window can be considered to show the shadow effect:![Desktop View](/assets/img/sample/mockup.png){: .shadow }CDN URLIf you host the images on the CDN, you can save the time of repeatedly writing the CDN URL by assigning the variable img_cdn of _config.yml file:img_cdn: https://cdn.comOnce img_cdn is assigned, the CDN URL will be added to the path of all images (images of site avatar and posts) starting with /.For instance, when using images:![The flower](/path/to/flower.png)The parsing result will automatically add the CDN prefix https://cdn.com before the image path:&lt;img src=\"https://cdn.com/path/to/flower.png\" alt=\"The flower\"&gt;Image PathWhen a post contains many images, it will be a time-consuming task to repeatedly define the path of the images. To solve this, we can define this path in the YAML block of the post:---img_path: /img/path/---And then, the image source of Markdown can write the file name directly:![The flower](flower.png)The output will be:&lt;img src=\"/img/path/flower.png\" alt=\"The flower\"&gt;Preview ImageIf you want to add an image at the top of the post, please provide an image with a resolution of 1200 x 630. Please note that if the image aspect ratio does not meet 1.91 : 1, the image will be scaled and cropped.Knowing these prerequisites, you can start setting the image’s attribute:---image:  path: /path/to/image  alt: image alternative text---Note that the img_path can also be passed to the preview image, that is, when it has been set, the  attribute path only needs the image file name.For simple use, you can also just use image to define the path.---image: /path/to/image---LQIPFor preview images:---image:  lqip: /path/to/lqip-file # or base64 URI---  You can observe LQIP in the preview image of post Text and Typography.For normal images:![Image description](/path/to/image){: lqip=\"/path/to/lqip-file\" }Pinned PostsYou can pin one or more posts to the top of the home page, and the fixed posts are sorted in reverse order according to their release date. Enable by:---pin: true---PromptsThere are several types of prompts: tip, info, warning, and danger. They can be generated by adding the class prompt-{type} to the blockquote. For example, define a prompt of type info as follows:&gt; Example line for prompt.{: .prompt-info }SyntaxInline Code`inline code part`Filepath Hightlight`/path/to/a/file.extend`{: .filepath}Code BlockMarkdown symbols ``` can easily create a code block as follows:```This is a plaintext code snippet.```Specifying LanguageUsing ```{language} you will get a code block with syntax highlight:```yamlkey: value```  The Jekyll tag {% highlight %} is not compatible with this theme.Line NumberBy default, all languages except plaintext, console, and terminal will display line numbers. When you want to hide the line number of a code block, add the class nolineno to it:```shellecho 'No more line numbers!'```{: .nolineno }Specifying the FilenameYou may have noticed that the code language will be displayed at the top of the code block. If you want to replace it with the file name, you can add the attribute file to achieve this:```shell# content```{: file=\"path/to/file\" }Liquid CodesIf you want to display the Liquid snippet, surround the liquid code with {% raw %} and {% endraw %}:{% raw %}```liquid{% if product.title contains 'Pack' %}  This product's title contains the word Pack.{% endif %}```{% endraw %}Or adding render_with_liquid: false (Requires Jekyll 4.0 or higher) to the post’s YAML block.VideosYou can embed a video with the following syntax:{% include embed/{Platform}.html id='{ID}' %}Where Platform is the lowercase of the platform name, and ID is the video ID.The following table shows how to get the two parameters we need in a given video URL, and you can also know the currently supported video platforms.            Video URL      Platform      ID                  https://www.youtube.com/watch?v=H-B46URT4mg      youtube      H-B46URT4mg              https://www.twitch.tv/videos/1634779211      twitch      1634779211      Learn MoreFor more knowledge about Jekyll posts, visit the Jekyll Docs: Posts."
  },
  
  {
    "title": "Text and Typography",
    "url": "/posts/text-and-typography/",
    "categories": "Blogging, Demo",
    "tags": "typography",
    "date": "2019-08-08 12:33:00 +0900",
    





    
    "snippet": "This post is to show Markdown syntax rendering on Chirpy, you can also use it as an example of writing. Now, let’s start looking at text and typography.HeadingsH1 - headingH2 - headingH3 - headingH...",
    "content": "This post is to show Markdown syntax rendering on Chirpy, you can also use it as an example of writing. Now, let’s start looking at text and typography.HeadingsH1 - headingH2 - headingH3 - headingH4 - headingParagraphQuisque egestas convallis ipsum, ut sollicitudin risus tincidunt a. Maecenas interdum malesuada egestas. Duis consectetur porta risus, sit amet vulputate urna facilisis ac. Phasellus semper dui non purus ultrices sodales. Aliquam ante lorem, ornare a feugiat ac, finibus nec mauris. Vivamus ut tristique nisi. Sed vel leo vulputate, efficitur risus non, posuere mi. Nullam tincidunt bibendum rutrum. Proin commodo ornare sapien. Vivamus interdum diam sed sapien blandit, sit amet aliquam risus mattis. Nullam arcu turpis, mollis quis laoreet at, placerat id nibh. Suspendisse venenatis eros eros.ListsOrdered list  Firstly  Secondly  ThirdlyUnordered list  Chapter          Section                  Paragraph                    ToDo list  Job          Step 1      Step 2      Step 3      Description list  Sun  the star around which the earth orbits  Moon  the natural satellite of the earth, visible by reflected light from the sunBlock Quote  This line shows the block quote.Prompts  An example showing the tip type prompt.  An example showing the info type prompt.  An example showing the warning type prompt.  An example showing the danger type prompt.Tables            Company      Contact      Country                  Alfreds Futterkiste      Maria Anders      Germany              Island Trading      Helen Bennett      UK              Magazzini Alimentari Riuniti      Giovanni Rovelli      Italy      Linkshttp://127.0.0.1:4000FootnoteClick the hook will locate the footnote1, and here is another footnote2.Inline codeThis is an example of Inline Code.FilepathHere is the /path/to/the/file.extend.Code blocksCommonThis is a common code snippet, without syntax highlight and line number.Specific Languageif [ $? -ne 0 ]; then  echo \"The command was not successful.\";  #do the needful / exitfi;Specific filename@import  \"colors/light-typography\",  \"colors/dark-typography\";MathematicsThe mathematics powered by MathJax:\\[\\sum_{n=1}^\\infty 1/n^2 = \\frac{\\pi^2}{6}\\]When $a \\ne 0$, there are two solutions to $ax^2 + bx + c = 0$ and they are\\[x = {-b \\pm \\sqrt{b^2-4ac} \\over 2a}\\]Mermaid SVG gantt  title  Adding GANTT diagram functionality to mermaid  apple :a, 2017-07-20, 1w  banana :crit, b, 2017-07-23, 1d  cherry :active, c, after b a, 1dImagesDefault (with caption)Full screen width and center alignmentLeft alignedFloat to leftPraesent maximus aliquam sapien. Sed vel neque in dolor pulvinar auctor. Maecenas pharetra, sem sit amet interdum posuere, tellus lacus eleifend magna, ac lobortis felis ipsum id sapien. Proin ornare rutrum metus, ac convallis diam volutpat sit amet. Phasellus volutpat, elit sit amet tincidunt mollis, felis mi scelerisque mauris, ut facilisis leo magna accumsan sapien. In rutrum vehicula nisl eget tempor. Nullam maximus ullamcorper libero non maximus. Integer ultricies velit id convallis varius. Praesent eu nisl eu urna finibus ultrices id nec ex. Mauris ac mattis quam. Fusce aliquam est nec sapien bibendum, vitae malesuada ligula condimentum.Float to rightPraesent maximus aliquam sapien. Sed vel neque in dolor pulvinar auctor. Maecenas pharetra, sem sit amet interdum posuere, tellus lacus eleifend magna, ac lobortis felis ipsum id sapien. Proin ornare rutrum metus, ac convallis diam volutpat sit amet. Phasellus volutpat, elit sit amet tincidunt mollis, felis mi scelerisque mauris, ut facilisis leo magna accumsan sapien. In rutrum vehicula nisl eget tempor. Nullam maximus ullamcorper libero non maximus. Integer ultricies velit id convallis varius. Praesent eu nisl eu urna finibus ultrices id nec ex. Mauris ac mattis quam. Fusce aliquam est nec sapien bibendum, vitae malesuada ligula condimentum.Dark/Light mode &amp; ShadowThe image below will toggle dark/light mode based on theme preference, notice it has shadows.VideoReverse Footnote            The footnote source &#8617;              The 2nd footnote source &#8617;      "
  }
  
]

